var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function() {
            this.change.init();
            this.update.init();
            this.fixmenu.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.change = {
        
        change: function($button) {
            var checked = false;

            if ($('#table').find('.j-change-item').filter(':checked').length) {
                checked = true;
            }
            
            $button.prop('disabled', !checked);
        },

        init: function() {
            var $table = $('#table'), $button = $('.j-change-button'), $checkbox = $table.find('.j-change-item');
            var _this = this;
            
            $table.find('.j-change-all').on('change', function() {
                $checkbox.prop('checked', $(this).prop('checked'));
                _this.change($button);
            });
            
            $table.find('.j-change-item').on('change', function() {
                _this.change($button);
            });

            _this.change($button);
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.fixmenu = {
        
        fixMenu: function($menu, t) {

            if (t >= (159)) {
                if (!$menu.hasClass('_sticked')) {
                    $menu.addClass('_sticked');
                }
            }
            else {
                if ($menu.hasClass('_sticked')) {
                    $menu.removeClass('_sticked');
                }
            }
            
        },

        init: function() {
            var $element = $('#navigation'),
                that = this;

            that.fixMenu($element, $(window).scrollTop());

            $(window).on('scroll', function(){
                that.fixMenu($element, $(window).scrollTop());
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.update = {
        
        changeStatus: function($status, $row, responce) {
            var text = '<span class="table__error">Err</span>', status = false;

            if (responce.hasOwnProperty('http_code')) {
                if (responce.http_code == 200) {
                    status = true;
                    text = '<span class="table__success">Ok</span>';
                }
            }

            if (status) {
                $row.addClass('_active');
            }
            else {
                $row.addClass('_failed');
            }

            $status.html(text);
        },

        changeButton: function() {
            $('body').on('click', '.j-update-all', function(){
                $('#table').find('.j-change-item').filter(':checked').each(function(){
                    $(this).closest('tr').find('.j-update').trigger('click');
                });
            });
        },

        init: function() {
            var _this = this;

            _this.changeButton();

            $('body').on('click', '.j-update', function(){

                (function($button) {
                    var $button, $row, $status, action, domain;

                    $button.addClass('_active');

                    // #
                    $row = $button.closest('tr');

                    // #
                    $status = $row.find('.j-status');

                    // #
                    action = $button.attr('href');
                    domain = $button.data('domain');

                    $.ajax({
                        url: action,
                        type: 'GET',
                        dataType: 'JSON',
                        contentType: false,
                        processData: true,
                        success: function(responce){
                            $row.find('.j-change-item').prop('checked', false);

                            console.log("suc:", responce);

                            $button.removeClass('_active');
                            $button.addClass('_success');
                            
                            _this.changeStatus($status, $row, responce);
                        },
                        error: function(responce){
                            console.log("err:", responce);

                            $button.removeClass('_active');
                            $button.addClass('_failed');

                            _this.changeStatus($status, $row, responce);
                        }
                    });
                })($(this));

            });
        }

    };

})(document.body);
"use strict";

$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;base64,
